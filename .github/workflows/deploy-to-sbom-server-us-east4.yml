name: Build and Deploy to sbom-server-us-east4

on:
  push:
    branches:
      - main  # or master, depending on your default branch

jobs:
  build-and-deploy:
    name: Build and Deploy to us-east4
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Authenticate to Google Cloud
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    # Configure Docker to use the gcloud command-line tool as a credential helper
    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker us-east4-docker.pkg.dev --quiet
        
    # Create the repository if it doesn't exist
    - name: Create Artifact Registry repository
      run: |
        # Try to create the repository, ignore if it already exists
        gcloud artifacts repositories create sbom-finder \
          --repository-format=docker \
          --location=us-east4 \
          --description="Docker repository for SBOM Finder" \
          --quiet || echo "Repository already exists"
        
    # Build the Docker image and tag with Artifact Registry path
    - name: Build Docker image
      run: |
        # Create Dockerfile if not exists
        if [ ! -f Dockerfile ]; then
          echo 'FROM python:3.12-slim' > Dockerfile
          echo '' >> Dockerfile
          echo 'WORKDIR /app' >> Dockerfile
          echo 'COPY requirements.txt .' >> Dockerfile
          echo 'RUN pip install --no-cache-dir -r requirements.txt gunicorn' >> Dockerfile
          echo '' >> Dockerfile
          echo 'COPY . .' >> Dockerfile
          echo 'ENV PORT=8080' >> Dockerfile
          echo 'EXPOSE 8080' >> Dockerfile
          echo '' >> Dockerfile
          echo '# Set database URI to mounted directory' >> Dockerfile
          echo 'ENV SQLITE_PATH=/data/sboms.db' >> Dockerfile
          echo '' >> Dockerfile
          echo 'CMD ["gunicorn", "--bind", "0.0.0.0:8080", "app:app"]' >> Dockerfile
        fi
        
        # Build and tag with Artifact Registry path
        docker build -t us-east4-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/sbom-finder/sbom-server:${{ github.sha }} .
        docker tag us-east4-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/sbom-finder/sbom-server:${{ github.sha }} us-east4-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/sbom-finder/sbom-server:latest

    # Push the Docker image to Artifact Registry
    - name: Push Docker image to Artifact Registry
      run: |
        # Print authentication status before push
        gcloud auth list
        
        # Push images
        docker push us-east4-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/sbom-finder/sbom-server:${{ github.sha }}
        docker push us-east4-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/sbom-finder/sbom-server:latest

    # Create the deploy script that will run on the VM
    - name: Create deploy script
      run: |
        echo '#!/bin/bash' > deploy.sh
        echo 'set -e' >> deploy.sh
        echo '' >> deploy.sh
        echo '# Pull the latest image' >> deploy.sh
        echo 'docker pull us-east4-docker.pkg.dev/$PROJECT_ID/sbom-finder/sbom-server:latest' >> deploy.sh
        echo '' >> deploy.sh
        echo '# Stop and remove the existing container' >> deploy.sh
        echo 'docker stop sbom-finder || true' >> deploy.sh
        echo 'docker rm sbom-finder || true' >> deploy.sh
        echo '' >> deploy.sh
        echo '# Ensure directories exist' >> deploy.sh
        echo 'mkdir -p /mnt/sbom-data/sbom_files' >> deploy.sh
        echo 'mkdir -p /mnt/sbom-data/uploads' >> deploy.sh
        echo 'mkdir -p /mnt/sbom-data/sbom_files/SBOM' >> deploy.sh
        echo 'chmod -R 777 /mnt/sbom-data' >> deploy.sh
        echo '' >> deploy.sh
        echo '# Run the new container with volumes mounted' >> deploy.sh
        echo 'docker run -d \\' >> deploy.sh
        echo '  --name sbom-finder \\' >> deploy.sh
        echo '  -p 80:8080 \\' >> deploy.sh
        echo '  -v /mnt/sbom-data:/data \\' >> deploy.sh
        echo '  -v /mnt/sbom-data/sbom_files:/app/sbom_files \\' >> deploy.sh
        echo '  -v /mnt/sbom-data/uploads:/app/uploads \\' >> deploy.sh
        echo '  -e SQLITE_PATH=/data/sboms.db \\' >> deploy.sh
        echo '  --restart unless-stopped \\' >> deploy.sh
        echo '  us-east4-docker.pkg.dev/$PROJECT_ID/sbom-finder/sbom-server:latest' >> deploy.sh
        echo '' >> deploy.sh
        echo '# Initialize database if it doesnt exist' >> deploy.sh
        echo 'if [ ! -f /mnt/sbom-data/sboms.db ]; then' >> deploy.sh
        echo '  echo "Initializing database..."' >> deploy.sh
        echo '  docker exec sbom-finder python -c "from app import db; db.create_all()"' >> deploy.sh
        echo 'fi' >> deploy.sh
        echo '' >> deploy.sh
        echo '# Verify container is running' >> deploy.sh
        echo 'docker ps | grep sbom-finder' >> deploy.sh
        echo 'echo "Deployment completed successfully!"' >> deploy.sh
        
        chmod +x deploy.sh

    # Deploy to the VM using SSH
    - name: Deploy to VM
      id: deploy
      run: |
        # Add host key to known_hosts to prevent SSH prompt
        gcloud compute config-ssh
        
        # Copy deploy script to VM
        gcloud compute scp deploy.sh sbom-server-us-east4:~ --zone=us-east4-a
        
        # Execute deploy script on VM
        gcloud compute ssh sbom-server-us-east4 --zone=us-east4-a -- \
          "PROJECT_ID=${{ secrets.GCP_PROJECT_ID }} bash ~/deploy.sh"
      
    # Get deployed application URL
    - name: Get Application URL
      run: |
        VM_IP=$(gcloud compute instances describe sbom-server-us-east4 --zone=us-east4-a --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
        echo "app_url=http://$VM_IP/" >> $GITHUB_OUTPUT
        echo "Application deployed to: http://$VM_IP/"
